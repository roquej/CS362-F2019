Begin Unit Test for playBaron:
Error- supply count of estate is not decremented properly when choosing to gain an estate.
Error- Buys is not increased by 1 when choosing to gain an estate.
Error- coins is not increased by 4 when choosing to discard an estate and estate is second card in hand.
Error- estate card not discarded when choosing to discard an estate and estate is second card in hand.
playBaron Unit Test completed.

Begin Unit Test for playMinion:
Error- when choosing to add 2 coins, number of coins added was incorrect.
Error- when first player chooses to discard hand, second player did not redraw 4 cards.
playMinion Unit Test completed.

Begin Unit Test for playAmbassador:
Error- The supply count of the returned card wasn't appropriately adjusted.
Error- Not all other players received a copy of the returned card when they should have.
Error- Not all copies of the returned card was removed from the first player's hand.
playAmbassador Unit Test completed.

Begin Unit Test for playTribute:
playTribute Unit Test completed.

Begin Unit Test for playMine:
Error- trying to gain a curse card should have returned -1.
Error- treasure card was not trashed.
playMine Unit Test completed.

Function 'compare'
Lines executed:85.71% of 7
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'initializeGame'
Lines executed:94.94% of 79
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 19
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 23
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 13
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 63
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 34
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:88.00% of 25
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'getCost'
Lines executed:19.35% of 31
Branches executed:100.00% of 28
Taken at least once:10.71% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 153
Branches executed:0.00% of 93
Taken at least once:0.00% of 93
No calls

Function 'discardCard'
Lines executed:87.50% of 16
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:75.00% of 16
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'playBaron'
Lines executed:64.10% of 39
Branches executed:88.89% of 18
Taken at least once:61.11% of 18
No calls

Function 'playMinion'
Lines executed:96.00% of 25
Branches executed:100.00% of 18
Taken at least once:83.33% of 18
No calls

Function 'playAmbassador'
Lines executed:89.66% of 29
Branches executed:100.00% of 24
Taken at least once:87.50% of 24
No calls

Function 'playTribute'
Lines executed:0.00% of 41
Branches executed:0.00% of 30
Taken at least once:0.00% of 30
No calls

Function 'playMine'
Lines executed:76.47% of 17
Branches executed:100.00% of 14
Taken at least once:64.29% of 14
No calls

Function 'updateCoins'
Lines executed:73.33% of 15
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

File 'dominion.c'
Lines executed:36.43% of 711
Branches executed:44.34% of 415
Taken at least once:31.33% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 350 returned 100% blocks executed 85%
      350:    8:int compare(const void* a, const void* b) {
      350:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
      350:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      125:   12:        return -1;
      225:   13:    return 0;
      350:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 12 returned 100% blocks executed 94%
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
       12:   44:    SelectStream(1);
       12:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
       12:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
       12:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
      132:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1320:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1200:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
     1200:   65:        }
      120:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
       12:   73:    if (numPlayers == 2)
branch  0 taken 92%
branch  1 taken 8%
        -:   74:    {
       11:   75:        state->supplyCount[curse] = 10;
       11:   76:    }
        1:   77:    else if (numPlayers == 3)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:        state->supplyCount[curse] = 20;
        1:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
       12:   87:    if (numPlayers == 2)
branch  0 taken 92%
branch  1 taken 8%
        -:   88:    {
       11:   89:        state->supplyCount[estate] = 8;
       11:   90:        state->supplyCount[duchy] = 8;
       11:   91:        state->supplyCount[province] = 8;
       11:   92:    }
        -:   93:    else
        -:   94:    {
        1:   95:        state->supplyCount[estate] = 12;
        1:   96:        state->supplyCount[duchy] = 12;
        1:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
       12:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:    state->supplyCount[silver] = 40;
       12:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      252:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1980:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
     1860:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
      120:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:                {
       24:  115:                    if (numPlayers == 2) {
branch  0 taken 92%
branch  1 taken 8%
       22:  116:                        state->supplyCount[i] = 8;
       22:  117:                    }
        -:  118:                    else {
        2:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
       24:  121:                }
        -:  122:                else
        -:  123:                {
       96:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
      120:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
     1740:  130:                state->supplyCount[i] = -1;
        -:  131:            }
     1740:  132:        }
        -:  133:
      240:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
       37:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32%
        -:  141:    {
       25:  142:        state->deckCount[i] = 0;
      100:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
       75:  145:            state->deck[i][j] = estate;
       75:  146:            state->deckCount[i]++;
       75:  147:        }
      200:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
      175:  150:            state->deck[i][j] = copper;
      175:  151:            state->deckCount[i]++;
      175:  152:        }
       25:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
       37:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32%
        -:  157:    {
       25:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
       25:  162:    }
        -:  163:
        -:  164:    //draw player hands
       37:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32%
        -:  166:    {
        -:  167:        //initialize hand size to zero
       25:  168:        state->handCount[i] = 0;
       25:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
       25:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
      336:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
      324:  180:        state->embargoTokens[i] = 0;
      324:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
       12:  184:    state->outpostPlayed = 0;
       12:  185:    state->phase = 0;
       12:  186:    state->numActions = 1;
       12:  187:    state->numBuys = 1;
       12:  188:    state->playedCardCount = 0;
       12:  189:    state->whoseTurn = 0;
       12:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
       72:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
       60:  195:        drawCard(state->whoseTurn, state);
       60:  196:    }
        -:  197:
       12:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
       12:  200:    return 0;
       12:  201:}
        -:  202:
function shuffle called 32 returned 100% blocks executed 100%
       32:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
       32:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
       32:  211:    if (state->deckCount[player] < 1)
branch  0 taken 22%
branch  1 taken 78%
        7:  212:        return -1;
       25:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      275:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      250:  217:        card = floor(Random() * state->deckCount[player]);
      250:  218:        newDeck[newDeckPos] = state->deck[player][card];
      250:  219:        newDeckPos++;
      875:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
      625:  221:            state->deck[player][i] = state->deck[player][i+1];
      625:  222:        }
      250:  223:        state->deckCount[player]--;
        -:  224:    }
      275:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      250:  226:        state->deck[player][i] = newDeck[i];
      250:  227:        state->deckCount[player]++;
      250:  228:    }
        -:  229:
       25:  230:    return 0;
       32:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 1 returned 100% blocks executed 100%
        1:  313:int numHandCards(struct gameState *state) {
        1:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 41 returned 100% blocks executed 100%
       41:  322:int supplyCount(int card, struct gameState *state) {
       41:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  348:int whoseTurn(struct gameState *state) {
        1:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
    #####:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
    #####:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
    #####:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
    #####:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
    #####:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
    #####:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
    #####:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
    #####:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
    #####:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
    #####:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
    #####:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
    #####:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
    #####:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
    #####:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
    #####:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
    #####:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
    #####:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 67 returned 100% blocks executed 83%
       67:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
       67:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 10%
branch  1 taken 90%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
        7:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
        7:  576:        state->deckCount[player] = state->discardCount[player];
        7:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
        7:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
        7:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
        7:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
        7:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
        7:  597:        if (deckCounter == 0)
branch  0 taken 71%
branch  1 taken 29%
        5:  598:            return -1;
        -:  599:
        2:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  601:        state->deckCount[player]--;
        2:  602:        state->handCount[player]++;//Increment hand count
        2:  603:    }
        -:  604:
        -:  605:    else {
       60:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
       60:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  614:        state->deckCount[player]--;
       60:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
       62:  618:    return 0;
       67:  619:}
        -:  620:
function getCost called 4 returned 100% blocks executed 19%
        4:  621:int getCost(int cardNumber)
        -:  622:{
        4:  623:    switch( cardNumber )
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 25%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
        1:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        2:  634:        return 0;
        -:  635:    case silver:
        1:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        4:  682:}
        -:  683:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  684:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  685:{
        -:  686:    int i;
        -:  687:    int j;
        -:  688:    int k;
        -:  689:    int x;
        -:  690:    int index;
    #####:  691:    int currentPlayer = whoseTurn(state);
    #####:  692:    int nextPlayer = currentPlayer + 1;
        -:  693:
    #####:  694:    int tributeRevealedCards[2] = {-1, -1};
        -:  695:    int temphand[MAX_HAND];// moved above the if statement
    #####:  696:    int drawntreasure=0;
        -:  697:    int cardDrawn;
    #####:  698:    int z = 0;// this is the counter for the temp hand
    #####:  699:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  700:        nextPlayer = 0;
    #####:  701:    }
        -:  702:
        -:  703:
        -:  704:    //uses switch to select card and perform actions
    #####:  705:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  706:    {
        -:  707:    case adventurer:
    #####:  708:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  709:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  710:                shuffle(currentPlayer, state);
    #####:  711:            }
    #####:  712:            drawCard(currentPlayer, state);
    #####:  713:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  714:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  715:                drawntreasure++;
        -:  716:            else {
    #####:  717:                temphand[z]=cardDrawn;
    #####:  718:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  719:                z++;
        -:  720:            }
        -:  721:        }
    #####:  722:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  723:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  724:            z=z-1;
        -:  725:        }
    #####:  726:        return 0;
        -:  727:
        -:  728:    case council_room:
        -:  729:        //+4 Cards
    #####:  730:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:        {
    #####:  732:            drawCard(currentPlayer, state);
    #####:  733:        }
        -:  734:
        -:  735:        //+1 Buy
    #####:  736:        state->numBuys++;
        -:  737:
        -:  738:        //Each other player draws a card
    #####:  739:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:        {
    #####:  741:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:            {
    #####:  743:                drawCard(i, state);
    #####:  744:            }
    #####:  745:        }
        -:  746:
        -:  747:        //put played card in played card pile
    #####:  748:        discardCard(handPos, currentPlayer, state, 0);
        -:  749:
    #####:  750:        return 0;
        -:  751:
        -:  752:    case feast:
        -:  753:        //gain card with cost up to 5
        -:  754:        //Backup hand
    #####:  755:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  756:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  757:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  758:        }
        -:  759:        //Backup hand
        -:  760:
        -:  761:        //Update Coins for Buy
    #####:  762:        updateCoins(currentPlayer, state, 5);
    #####:  763:        x = 1;//Condition to loop on
    #####:  764:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  765:            if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  766:                if (DEBUG)
        -:  767:                    printf("None of that card left, sorry!\n");
        -:  768:
        -:  769:                if (DEBUG) {
        -:  770:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  771:                }
    #####:  772:            }
    #####:  773:            else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  774:                printf("That card is too expensive!\n");
        -:  775:
        -:  776:                if (DEBUG) {
        -:  777:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  778:                }
    #####:  779:            }
        -:  780:            else {
        -:  781:
        -:  782:                if (DEBUG) {
        -:  783:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  784:                }
        -:  785:
    #####:  786:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  787:                x = 0;//No more buying cards
        -:  788:
        -:  789:                if (DEBUG) {
        -:  790:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:                }
        -:  792:
        -:  793:            }
        -:  794:        }
        -:  795:
        -:  796:        //Reset Hand
    #####:  797:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  798:            state->hand[currentPlayer][i] = temphand[i];
    #####:  799:            temphand[i] = -1;
    #####:  800:        }
        -:  801:        //Reset Hand
        -:  802:
    #####:  803:        return 0;
        -:  804:
        -:  805:    case gardens:
    #####:  806:        return -1;
        -:  807:
        -:  808:    case mine:
    #####:  809:        return playMine(choice1, choice2, currentPlayer, handPos, state);
        -:  810:        
        -:  811:    case remodel:
    #####:  812:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  815:        {
    #####:  816:            return -1;
        -:  817:        }
        -:  818:
    #####:  819:        gainCard(choice2, state, 0, currentPlayer);
        -:  820:
        -:  821:        //discard card from hand
    #####:  822:        discardCard(handPos, currentPlayer, state, 0);
        -:  823:
        -:  824:        //discard trashed card
    #####:  825:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  826:        {
    #####:  827:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  828:            {
    #####:  829:                discardCard(i, currentPlayer, state, 0);
    #####:  830:                break;
        -:  831:            }
    #####:  832:        }
        -:  833:
        -:  834:
    #####:  835:        return 0;
        -:  836:
        -:  837:    case smithy:
        -:  838:        //+3 Cards
    #####:  839:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  840:        {
    #####:  841:            drawCard(currentPlayer, state);
    #####:  842:        }
        -:  843:
        -:  844:        //discard card from hand
    #####:  845:        discardCard(handPos, currentPlayer, state, 0);
    #####:  846:        return 0;
        -:  847:
        -:  848:    case village:
        -:  849:        //+1 Card
    #####:  850:        drawCard(currentPlayer, state);
        -:  851:
        -:  852:        //+2 Actions
    #####:  853:        state->numActions = state->numActions + 2;
        -:  854:
        -:  855:        //discard played card from hand
    #####:  856:        discardCard(handPos, currentPlayer, state, 0);
    #####:  857:        return 0;
        -:  858:
        -:  859:    case baron:
    #####:  860:        return playBaron(choice1, currentPlayer, state);
        -:  861:
        -:  862:    case great_hall:
        -:  863:        //+1 Card
    #####:  864:        drawCard(currentPlayer, state);
        -:  865:
        -:  866:        //+1 Actions
    #####:  867:        state->numActions++;
        -:  868:
        -:  869:        //discard card from hand
    #####:  870:        discardCard(handPos, currentPlayer, state, 0);
    #####:  871:        return 0;
        -:  872:
        -:  873:    case minion:
    #####:  874:       return playMinion(choice1, choice2, currentPlayer, handPos, state);
        -:  875:
        -:  876:    case steward:
    #####:  877:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  878:        {
        -:  879:            //+2 cards
    #####:  880:            drawCard(currentPlayer, state);
    #####:  881:            drawCard(currentPlayer, state);
    #####:  882:        }
    #####:  883:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  884:        {
        -:  885:            //+2 coins
    #####:  886:            state->coins = state->coins + 2;
    #####:  887:        }
        -:  888:        else
        -:  889:        {
        -:  890:            //trash 2 cards in hand
    #####:  891:            discardCard(choice2, currentPlayer, state, 1);
    #####:  892:            discardCard(choice3, currentPlayer, state, 1);
        -:  893:        }
        -:  894:
        -:  895:        //discard card from hand
    #####:  896:        discardCard(handPos, currentPlayer, state, 0);
    #####:  897:        return 0;
        -:  898:
        -:  899:    case tribute:
    #####:  900:        return playTribute(tributeRevealedCards, currentPlayer, nextPlayer, state);
        -:  901:
        -:  902:    case ambassador:
    #####:  903:        return playAmbassador(choice1, choice2, currentPlayer, handPos, state);
        -:  904:
        -:  905:    case cutpurse:
        -:  906:
    #####:  907:        updateCoins(currentPlayer, state, 2);
    #####:  908:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  909:        {
    #####:  910:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  911:            {
    #####:  912:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  913:                {
    #####:  914:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  915:                    {
    #####:  916:                        discardCard(j, i, state, 0);
    #####:  917:                        break;
        -:  918:                    }
    #####:  919:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  920:                    {
    #####:  921:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  922:                        {
        -:  923:                            if (DEBUG)
        -:  924:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  925:                        }
    #####:  926:                        break;
        -:  927:                    }
    #####:  928:                }
        -:  929:
    #####:  930:            }
        -:  931:
    #####:  932:        }
        -:  933:
        -:  934:        //discard played card from hand
    #####:  935:        discardCard(handPos, currentPlayer, state, 0);
        -:  936:
    #####:  937:        return 0;
        -:  938:
        -:  939:
        -:  940:    case embargo:
        -:  941:        //+2 Coins
    #####:  942:        state->coins = state->coins + 2;
        -:  943:
        -:  944:        //see if selected pile is in play
    #####:  945:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  946:        {
    #####:  947:            return -1;
        -:  948:        }
        -:  949:
        -:  950:        //add embargo token to selected supply pile
    #####:  951:        state->embargoTokens[choice1]++;
        -:  952:
        -:  953:        //trash card
    #####:  954:        discardCard(handPos, currentPlayer, state, 1);
    #####:  955:        return 0;
        -:  956:
        -:  957:    case outpost:
        -:  958:        //set outpost flag
    #####:  959:        state->outpostPlayed++;
        -:  960:
        -:  961:        //discard card
    #####:  962:        discardCard(handPos, currentPlayer, state, 0);
    #####:  963:        return 0;
        -:  964:
        -:  965:    case salvager:
        -:  966:        //+1 buy
    #####:  967:        state->numBuys++;
        -:  968:
    #####:  969:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  970:        {
        -:  971:            //gain coins equal to trashed card
    #####:  972:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  973:            //trash card
    #####:  974:            discardCard(choice1, currentPlayer, state, 1);
    #####:  975:        }
        -:  976:
        -:  977:        //discard card
    #####:  978:        discardCard(handPos, currentPlayer, state, 0);
    #####:  979:        return 0;
        -:  980:
        -:  981:    case sea_hag:
    #####:  982:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  983:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  984:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  985:                state->deckCount[i]--;
    #####:  986:                state->discardCount[i]++;
    #####:  987:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####:  988:            }
    #####:  989:        }
    #####:  990:        return 0;
        -:  991:
        -:  992:    case treasure_map:
        -:  993:        //search hand for another treasure_map
    #####:  994:        index = -1;
    #####:  995:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:        {
    #####:  997:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:            {
    #####:  999:                index = i;
    #####: 1000:                break;
        -: 1001:            }
    #####: 1002:        }
    #####: 1003:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1004:        {
        -: 1005:            //trash both treasure cards
    #####: 1006:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1007:            discardCard(index, currentPlayer, state, 1);
        -: 1008:
        -: 1009:            //gain 4 Gold cards
    #####: 1010:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:            {
    #####: 1012:                gainCard(gold, state, 1, currentPlayer);
    #####: 1013:            }
        -: 1014:
        -: 1015:            //return success
    #####: 1016:            return 1;
        -: 1017:        }
        -: 1018:
        -: 1019:        //no second treasure_map found in hand
    #####: 1020:        return -1;
        -: 1021:    }
        -: 1022:
    #####: 1023:    return -1;
    #####: 1024:}
        -: 1025:
function discardCard called 4632 returned 100% blocks executed 90%
     4632: 1026:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1027:{
        -: 1028:
        -: 1029:    //if card is not trashed, added to Played pile
     4632: 1030:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1031:    {
        -: 1032:        //add card to played pile
     4632: 1033:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     4632: 1034:        state->playedCardCount++;
     4632: 1035:    }
        -: 1036:
        -: 1037:    //set played card to -1
     4632: 1038:    state->hand[currentPlayer][handPos] = -1;
        -: 1039:
        -: 1040:    //remove card from player's hand
     4632: 1041:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1042:    {
        -: 1043:        //reduce number of cards in hand
       10: 1044:        state->handCount[currentPlayer]--;
       10: 1045:    }
     4622: 1046:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1047:    {
        -: 1048:        //reduce number of cards in hand
    #####: 1049:        state->handCount[currentPlayer]--;
    #####: 1050:    }
        -: 1051:    else
        -: 1052:    {
        -: 1053:        //replace discarded card with last card in hand
     4622: 1054:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1055:        //set last card to -1
     4622: 1056:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1057:        //reduce number of cards in hand
     4622: 1058:        state->handCount[currentPlayer]--;
        -: 1059:    }
        -: 1060:
     4632: 1061:    return 0;
        -: 1062:}
        -: 1063:
function gainCard called 35 returned 100% blocks executed 81%
       35: 1064:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1065:{
        -: 1066:    //Note: supplyPos is enum of choosen card
        -: 1067:
        -: 1068:    //check if supply pile is empty (0) or card is not used in game (-1)
       35: 1069:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1070:    {
    #####: 1071:        return -1;
        -: 1072:    }
        -: 1073:
        -: 1074:    //added card for [whoseTurn] current player:
        -: 1075:    // toFlag = 0 : add to discard
        -: 1076:    // toFlag = 1 : add to deck
        -: 1077:    // toFlag = 2 : add to hand
        -: 1078:
       35: 1079:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1080:    {
    #####: 1081:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1082:        state->deckCount[player]++;
    #####: 1083:    }
       35: 1084:    else if (toFlag == 2)
branch  0 taken 86%
branch  1 taken 14%
        -: 1085:    {
       30: 1086:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
       30: 1087:        state->handCount[player]++;
       30: 1088:    }
        -: 1089:    else
        -: 1090:    {
        5: 1091:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1092:        state->discardCount[player]++;
        -: 1093:    }
        -: 1094:
        -: 1095:    //decrease number in supply pile
       35: 1096:    state->supplyCount[supplyPos]--;
        -: 1097:
       35: 1098:    return 0;
       35: 1099:}
        -: 1100:
function playBaron called 3 returned 100% blocks executed 73%
        3: 1101:int playBaron(int choice1, int currentPlayer, struct gameState *state)
        -: 1102:{
        3: 1103:    state->numBuys++;//Increase buys by 1!
        3: 1104:    state->numBuys++;//Increase buys by 1!
        -: 1105:
        3: 1106:    if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 67%
branch  1 taken 33%
        2: 1107:        int p = 0;//Iterator for hand!
        2: 1108:        int card_not_discarded = 1;//Flag for discard set!
        7: 1109:        while(card_not_discarded) {
branch  0 taken 71%
branch  1 taken 29%
        5: 1110:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 0%
branch  1 taken 100%
    #####: 1111:                state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1112:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1113:                state->discardCount[currentPlayer]++;
    #####: 1114:                for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####: 1115:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1116:                }
    #####: 1117:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1118:                state->handCount[currentPlayer]--;
    #####: 1119:                card_not_discarded = 0;//Exit the loop
    #####: 1120:            }
        5: 1121:            else if (p > state->handCount[currentPlayer]) {
branch  0 taken 40%
branch  1 taken 60%
        -: 1122:                if(DEBUG) {
        -: 1123:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1124:                    printf("Must gain an estate if there are any\n");
        -: 1125:                }
        2: 1126:                if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
        2: 1127:                    gainCard(estate, state, 0, currentPlayer);
        -: 1128:
        2: 1129:                    state->supplyCount[estate]--;//Decrement estates
        2: 1130:                    if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1131:                        isGameOver(state);
    #####: 1132:                    }
        2: 1133:                }
        2: 1134:                card_not_discarded = 0;//Exit the loop
        2: 1135:            }
        -: 1136:
        -: 1137:            else {
        3: 1138:                p++;//Next card
        3: 1139:                p++;//Next card
        -: 1140:            }
        -: 1141:        }
        2: 1142:    }
        -: 1143:
        -: 1144:    else {
        1: 1145:        if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
        1: 1146:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1147:
        1: 1148:            state->supplyCount[estate]--;//Decrement Estates
        1: 1149:            if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1150:                isGameOver(state);
    #####: 1151:            }
        1: 1152:        }
        -: 1153:    }
        -: 1154:
        -: 1155:
        3: 1156:    return 0;
        -: 1157:}
        -: 1158:
function playMinion called 2 returned 100% blocks executed 96%
        2: 1159:int playMinion(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state)
        -: 1160:{
        -: 1161:    //+1 action
        2: 1162:    state->numActions++;
        -: 1163:
        -: 1164:    //discard card from hand
        2: 1165:    discardCard(handPos, currentPlayer, state, 0);
        -: 1166:
        2: 1167:    if (choice1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1168:    {
        1: 1169:        state->coins = state->coins + 4;
        1: 1170:    }
        1: 1171:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100%
branch  1 taken 0%
        -: 1172:    {
        -: 1173:        //discard hand
        1: 1174:        while(numHandCards(state) > 0)
branch  0 taken 0%
branch  1 taken 100%
        -: 1175:        {
    #####: 1176:            discardCard(handPos, currentPlayer, state, 0);
        -: 1177:        }
        -: 1178:
        -: 1179:        //draw 4
        5: 1180:        for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1181:        {
        4: 1182:            drawCard(currentPlayer, state);
        4: 1183:        }
        -: 1184:
        -: 1185:        //other players discard hand and redraw if hand size > 4
        3: 1186:        for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1187:        {
        2: 1188:            if (i != currentPlayer)
branch  0 taken 50%
branch  1 taken 50%
        -: 1189:            {
        1: 1190:                if ( state->handCount[i] > 4 )
branch  0 taken 100%
branch  1 taken 0%
        -: 1191:                {
        -: 1192:                    //discard hand
        6: 1193:                    while( state->handCount[i] > 0 )
branch  0 taken 83%
branch  1 taken 17%
        -: 1194:                    {
        5: 1195:                        discardCard(handPos, i, state, 0);
        -: 1196:                    }
        -: 1197:
        -: 1198:                    //draw 4
        4: 1199:                    for (int j = 1; j < 4; j++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1200:                    {
        3: 1201:                        drawCard(i, state);
        3: 1202:                    }
        1: 1203:                }
        1: 1204:            }
        2: 1205:        }
        -: 1206:
        1: 1207:    }
        2: 1208:    return 0;
        -: 1209:}
        -: 1210:
function playAmbassador called 4 returned 100% blocks executed 93%
        4: 1211:int playAmbassador(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state)
        -: 1212:{
        -: 1213:    int i;
        4: 1214:    int j = 0;		//used to check if player has enough cards to discard
        -: 1215:
        4: 1216:    if (choice2 > 2 || choice2 < 0)
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 33%
branch  3 taken 67%
        -: 1217:    {
        2: 1218:        return -1;
        -: 1219:    }
        -: 1220:
        2: 1221:    if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -: 1222:    {
    #####: 1223:        return -1;
        -: 1224:    }
        -: 1225:
        6: 1226:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1227:    {
        4: 1228:        if (i != handPos && state->hand[currentPlayer][i] == choice1)
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 100%
branch  3 taken 0%
        -: 1229:        {
        2: 1230:            j++;
        2: 1231:        }
        4: 1232:    }
        2: 1233:    if (j < choice2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1234:    {
        1: 1235:        return -1;
        -: 1236:    }
        -: 1237:    if (DEBUG)
        -: 1238:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1239:
        -: 1240:    //increase supply count for choosen card by amount being discarded
        1: 1241:    state->supplyCount[state->hand[currentPlayer][choice1]] += 1;
        -: 1242:    //each other player gains a copy of revealed card
        4: 1243:    for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1244:    {
        3: 1245:        if (i != currentPlayer)
branch  0 taken 67%
branch  1 taken 33%
        -: 1246:        {
        2: 1247:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        2: 1248:        }
        3: 1249:    }
        -: 1250:
        -: 1251:    //discard played card from hand
        1: 1252:    discardCard(handPos, currentPlayer, state, 0);
        -: 1253:
        -: 1254:    //trash copies of cards returned to supply
        2: 1255:    for (j = 1; j < choice2; j++)
branch  0 taken 50%
branch  1 taken 50%
        -: 1256:    {
        3: 1257:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -: 1258:        {
        2: 1259:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 0%
branch  1 taken 100%
        -: 1260:            {
    #####: 1261:                discardCard(i, currentPlayer, state, 1);
    #####: 1262:                break;
        -: 1263:            }
        2: 1264:        }
        1: 1265:    }
        -: 1266:
        1: 1267:    return 0;
        4: 1268:}
        -: 1269:
function playTribute called 0 returned 0% blocks executed 0%
    #####: 1270:int playTribute(int *tributeRevealedCards, int currentPlayer, int nextPlayer, struct gameState *state)
        -: 1271:{
        -: 1272:    int i;
        -: 1273:
    #####: 1274:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1275:        if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1276:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1277:            state->deckCount[nextPlayer]--;
    #####: 1278:        }
    #####: 1279:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1280:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1281:            state->discardCount[nextPlayer]--;
    #####: 1282:        }
        -: 1283:        else {
        -: 1284:            //No Card to Reveal
        -: 1285:            if (DEBUG) {
        -: 1286:                printf("No cards to reveal\n");
        -: 1287:            }
        -: 1288:        }
    #####: 1289:    }
        -: 1290:
        -: 1291:    else {
    #####: 1292:        if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1293:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1294:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1295:                state->deckCount[nextPlayer]++;
    #####: 1296:                state->discard[nextPlayer][i] = -1;
    #####: 1297:                state->discardCount[nextPlayer]--;
    #####: 1298:            }
        -: 1299:
    #####: 1300:            shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1301:        }
    #####: 1302:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1303:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1304:        state->deckCount[nextPlayer]--;
    #####: 1305:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1306:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1307:        state->deckCount[nextPlayer]--;
        -: 1308:    }
        -: 1309:
    #####: 1310:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1311:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1312:        state->playedCardCount++;
    #####: 1313:        tributeRevealedCards[1] = -1;
    #####: 1314:    }
        -: 1315:
    #####: 1316:    for (i = 0; i <= 2; i ++) {
branch  0 never executed
branch  1 never executed
    #####: 1317:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1318:            state->coins += 2;
    #####: 1319:        }
        -: 1320:
    #####: 1321:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1322:            drawCard(currentPlayer, state);
        -: 1323:           // drawCard(currentPlayer, state);
    #####: 1324:        }
        -: 1325:        else { //Action Card
    #####: 1326:            state->numActions = state->numActions + 3;
        -: 1327:        }
    #####: 1328:    }
        -: 1329:
    #####: 1330:    return 0;
        -: 1331:}
        -: 1332:
function playMine called 3 returned 100% blocks executed 82%
        3: 1333:int playMine(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state)
        -: 1334:{
        3: 1335:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1336:
        3: 1337:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 100%
        -: 1338:    {
        1: 1339:        return -1;
        -: 1340:    }
        -: 1341:
        2: 1342:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -: 1343:    {
    #####: 1344:        return -1;
        -: 1345:    }
        -: 1346:
        2: 1347:    if ( (getCost(state->hand[currentPlayer][choice1]) + 6) < getCost(choice2) )
branch  0 taken 0%
branch  1 taken 100%
        -: 1348:    {
    #####: 1349:        return -1;
        -: 1350:    }
        -: 1351:
        2: 1352:    gainCard(choice2, state, 2, currentPlayer);
        -: 1353:
        -: 1354:    //discard card from hand
        2: 1355:    discardCard(handPos, currentPlayer, state, 0);
        -: 1356:
        -: 1357:    //discard trashed card
        4: 1358:    for (int i = 1; i < state->handCount[currentPlayer]; i++)
branch  0 taken 50%
branch  1 taken 50%
        -: 1359:    {
        2: 1360:        if (state->hand[currentPlayer][i] == j)
branch  0 taken 0%
branch  1 taken 100%
        -: 1361:        {
    #####: 1362:            discardCard(i, currentPlayer, state, 0);
    #####: 1363:            break;
        -: 1364:        }
        2: 1365:    }
        -: 1366:
        2: 1367:    return 0;
        -: 1368:
        3: 1369:}
        -: 1370:
function updateCoins called 12 returned 100% blocks executed 85%
       12: 1371:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1372:{
        -: 1373:    int i;
        -: 1374:
        -: 1375:    //reset coin count
       12: 1376:    state->coins = 0;
        -: 1377:
        -: 1378:    //add coins for each Treasure card in player's hand
       72: 1379:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1380:    {
       60: 1381:        if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1382:        {
       48: 1383:            state->coins += 1;
       48: 1384:        }
       12: 1385:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1386:        {
    #####: 1387:            state->coins += 2;
    #####: 1388:        }
       12: 1389:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1390:        {
    #####: 1391:            state->coins += 3;
    #####: 1392:        }
       60: 1393:    }
        -: 1394:
        -: 1395:    //add bonus
       12: 1396:    state->coins += bonus;
        -: 1397:
       12: 1398:    return 0;
        -: 1399:}
        -: 1400:
        -: 1401:
        -: 1402://end of dominion.c
        -: 1403:
