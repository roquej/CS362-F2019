Begin random testing of baron card:
In 10000 iterations:
10000 iterations had an inappropriate change in buys.
3180 iterations had an inappropriate change in coins.
End random testing of baron card.

Begin random testing of minion card:
In 1000 iterations:
331 iterations had an inappropriate change in actions.
331 iterations had an inappropriate change in coins.
517 iterations had an inappropriate number of card draws for the current player.
End random testing of minion card.

Begin random testing of tribute card:
In 10000 iterations:
5503 iterations had an inappropriate change in actions.
7998 iterations had an inappropriate change in coins.
5146 iterations had an inappropriate number of card draws for the current player.
End random testing of tribute card.

Function 'compare'
Lines executed:85.71% of 7
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'initializeGame'
Lines executed:96.20% of 79
Branches executed:100.00% of 46
Taken at least once:91.30% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 19
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 23
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 13
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 63
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 34
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:88.00% of 25
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'getCost'
Lines executed:19.35% of 31
Branches executed:100.00% of 28
Taken at least once:10.71% of 28
No calls

Function 'baronRefactor'
Lines executed:89.19% of 37
Branches executed:100.00% of 18
Taken at least once:88.89% of 18
No calls

Function 'minionRefactor'
Lines executed:75.00% of 24
Branches executed:77.78% of 18
Taken at least once:66.67% of 18
No calls

Function 'ambassadorRefactor'
Lines executed:35.71% of 28
Branches executed:53.85% of 26
Taken at least once:42.31% of 26
No calls

Function 'tributeRefactor'
Lines executed:73.81% of 42
Branches executed:93.33% of 30
Taken at least once:86.67% of 30
No calls

Function 'mineRefactor'
Lines executed:47.06% of 17
Branches executed:71.43% of 14
Taken at least once:42.86% of 14
No calls

Function 'cardEffect'
Lines executed:0.00% of 160
Branches executed:0.00% of 97
Taken at least once:0.00% of 97
No calls

Function 'discardCard'
Lines executed:87.50% of 16
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 16
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:73.33% of 15
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

File 'dominion.c'
Lines executed:38.60% of 715
Branches executed:46.56% of 421
Taken at least once:35.15% of 421
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 883372 returned 100% blocks executed 85%
   883372:    8:int compare(const void* a, const void* b) {
   883372:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:        return 1;
   883372:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
   315490:   12:        return -1;
   567882:   13:    return 0;
   883372:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 21012 returned 100% blocks executed 95%
    21012:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
    21012:   44:    SelectStream(1);
    21012:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
    21012:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
    21012:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
   231132:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
  2311320:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
  2101200:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
  2101200:   65:        }
   210120:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
    21012:   73:    if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
     6980:   75:        state->supplyCount[curse] = 10;
     6980:   76:    }
    14032:   77:    else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
     6990:   79:        state->supplyCount[curse] = 20;
     6990:   80:    }
        -:   81:    else
        -:   82:    {
     7042:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
    21012:   87:    if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
     6980:   89:        state->supplyCount[estate] = 8;
     6980:   90:        state->supplyCount[duchy] = 8;
     6980:   91:        state->supplyCount[province] = 8;
     6980:   92:    }
        -:   93:    else
        -:   94:    {
    14032:   95:        state->supplyCount[estate] = 12;
    14032:   96:        state->supplyCount[duchy] = 12;
    14032:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
    21012:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    21012:  102:    state->supplyCount[silver] = 40;
    21012:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
   441252:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
  3466980:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:        {
  3256860:  110:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
   210120:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:                {
    42024:  115:                    if (numPlayers == 2) {
branch  0 taken 33%
branch  1 taken 67%
    13960:  116:                        state->supplyCount[i] = 8;
    13960:  117:                    }
        -:  118:                    else {
    28064:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
    42024:  121:                }
        -:  122:                else
        -:  123:                {
   168096:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
   210120:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
  3046740:  130:                state->supplyCount[i] = -1;
        -:  131:            }
  3046740:  132:        }
        -:  133:
   420240:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
    84110:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  141:    {
    63098:  142:        state->deckCount[i] = 0;
   252392:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
   189294:  145:            state->deck[i][j] = estate;
   189294:  146:            state->deckCount[i]++;
   189294:  147:        }
   504784:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
   441686:  150:            state->deck[i][j] = copper;
   441686:  151:            state->deckCount[i]++;
   441686:  152:        }
    63098:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
    84110:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  157:    {
    63098:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
    63098:  162:    }
        -:  163:
        -:  164:    //draw player hands
    84110:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  166:    {
        -:  167:        //initialize hand size to zero
    63098:  168:        state->handCount[i] = 0;
    63098:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
        -:  171:        // for (j = 0; j < 5; j++)
        -:  172:        //	{
        -:  173:        //	  drawCard(i, state);
        -:  174:        //	}
    63098:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
   588336:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
   567324:  180:        state->embargoTokens[i] = 0;
   567324:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
    21012:  184:    state->outpostPlayed = 0;
    21012:  185:    state->phase = 0;
    21012:  186:    state->numActions = 1;
    21012:  187:    state->numBuys = 1;
    21012:  188:    state->playedCardCount = 0;
    21012:  189:    state->whoseTurn = 0;
    21012:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
   126072:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
   105060:  195:        drawCard(state->whoseTurn, state);
   105060:  196:    }
        -:  197:
    21012:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
    21012:  200:    return 0;
    21012:  201:}
        -:  202:
function shuffle called 63846 returned 100% blocks executed 100%
    63846:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
    63846:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
    63846:  211:    if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
      748:  212:        return -1;
    63098:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
   694078:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
   630980:  217:        card = floor(Random() * state->deckCount[player]);
   630980:  218:        newDeck[newDeckPos] = state->deck[player][card];
   630980:  219:        newDeckPos++;
  2192722:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
  1561742:  221:            state->deck[player][i] = state->deck[player][i+1];
  1561742:  222:        }
   630980:  223:        state->deckCount[player]--;
        -:  224:    }
   694078:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
   630980:  226:        state->deck[player][i] = newDeck[i];
   630980:  227:        state->deckCount[player]++;
   630980:  228:    }
        -:  229:
    63098:  230:    return 0;
    63846:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 261705 returned 100% blocks executed 100%
   261705:  313:int numHandCards(struct gameState *state) {
   261705:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 48262 returned 100% blocks executed 100%
    48262:  322:int supplyCount(int card, struct gameState *state) {
    48262:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 261705 returned 100% blocks executed 100%
   261705:  348:int whoseTurn(struct gameState *state) {
   261705:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    #####:  397:    if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    #####:  403:    j = 0;
    #####:  404:    for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:        {
    #####:  408:            j++;
    #####:  409:        }
    #####:  410:    }
    #####:  411:    if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    #####:  416:    return 0;
    #####:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
    #####:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
    #####:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
    #####:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
    #####:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
    #####:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
    #####:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
    #####:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
    #####:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
    #####:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
    #####:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
    #####:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
    #####:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
    #####:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
    #####:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
    #####:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
    #####:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
    #####:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 123634 returned 100% blocks executed 83%
   123634:  563:int drawCard(int player, struct gameState *state)
        -:  564:{   int count;
        -:  565:    int deckCounter;
   123634:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  567:
        -:  568:        //Step 1 Shuffle the discard pile back into a deck
        -:  569:        int i;
        -:  570:        //Move discard to deck
      748:  571:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  572:            state->deck[player][i] = state->discard[player][i];
    #####:  573:            state->discard[player][i] = -1;
    #####:  574:        }
        -:  575:
      748:  576:        state->deckCount[player] = state->discardCount[player];
      748:  577:        state->discardCount[player] = 0;//Reset discard
        -:  578:
        -:  579:        //Shufffle the deck
      748:  580:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  581:
        -:  582:        if (DEBUG) { //Debug statements
        -:  583:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  584:        }
        -:  585:
      748:  586:        state->discardCount[player] = 0;
        -:  587:
        -:  588:        //Step 2 Draw Card
      748:  589:        count = state->handCount[player];//Get current player's hand count
        -:  590:
        -:  591:        if (DEBUG) { //Debug statements
        -:  592:            printf("Current hand count: %d\n", count);
        -:  593:        }
        -:  594:
      748:  595:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  596:
      748:  597:        if (deckCounter == 0)
branch  0 taken 99%
branch  1 taken 1%
      747:  598:            return -1;
        -:  599:
        1:  600:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  601:        state->deckCount[player]--;
        1:  602:        state->handCount[player]++;//Increment hand count
        1:  603:    }
        -:  604:
        -:  605:    else {
   122886:  606:        int count = state->handCount[player];//Get current hand count for player
        -:  607:        int deckCounter;
        -:  608:        if (DEBUG) { //Debug statements
        -:  609:            printf("Current hand count: %d\n", count);
        -:  610:        }
        -:  611:
   122886:  612:        deckCounter = state->deckCount[player];//Create holder for the deck count
   122886:  613:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   122886:  614:        state->deckCount[player]--;
   122886:  615:        state->handCount[player]++;//Increment hand count
        -:  616:    }
        -:  617:
   122887:  618:    return 0;
   123634:  619:}
        -:  620:
function getCost called 4 returned 100% blocks executed 19%
        4:  621:int getCost(int cardNumber)
        -:  622:{
        4:  623:    switch( cardNumber )
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 25%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  624:    {
        -:  625:    case curse:
        1:  626:        return 0;
        -:  627:    case estate:
    #####:  628:        return 2;
        -:  629:    case duchy:
    #####:  630:        return 5;
        -:  631:    case province:
    #####:  632:        return 8;
        -:  633:    case copper:
        2:  634:        return 0;
        -:  635:    case silver:
        1:  636:        return 3;
        -:  637:    case gold:
    #####:  638:        return 6;
        -:  639:    case adventurer:
    #####:  640:        return 6;
        -:  641:    case council_room:
    #####:  642:        return 5;
        -:  643:    case feast:
    #####:  644:        return 4;
        -:  645:    case gardens:
    #####:  646:        return 4;
        -:  647:    case mine:
    #####:  648:        return 5;
        -:  649:    case remodel:
    #####:  650:        return 4;
        -:  651:    case smithy:
    #####:  652:        return 4;
        -:  653:    case village:
    #####:  654:        return 3;
        -:  655:    case baron:
    #####:  656:        return 4;
        -:  657:    case great_hall:
    #####:  658:        return 3;
        -:  659:    case minion:
    #####:  660:        return 5;
        -:  661:    case steward:
    #####:  662:        return 3;
        -:  663:    case tribute:
    #####:  664:        return 5;
        -:  665:    case ambassador:
    #####:  666:        return 3;
        -:  667:    case cutpurse:
    #####:  668:        return 4;
        -:  669:    case embargo:
    #####:  670:        return 2;
        -:  671:    case outpost:
    #####:  672:        return 5;
        -:  673:    case salvager:
    #####:  674:        return 4;
        -:  675:    case sea_hag:
    #####:  676:        return 4;
        -:  677:    case treasure_map:
    #####:  678:        return 4;
        -:  679:    }
        -:  680:
    #####:  681:    return -1;
        4:  682:}
        -:  683:
function baronRefactor called 10003 returned 100% blocks executed 92%
    10003:  684:int baronRefactor(int choice1, int currentPlayer, struct gameState *state) 
        -:  685:{
    10003:  686:    state->numActions++;//Increase actions by 1!
    10003:  687:    if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 50%
branch  1 taken 50%
     5035:  688:        int p = 0;//Iterator for hand!
     5035:  689:        int card_not_discarded = 1;//Flag for discard set!
    20139:  690:        while(card_not_discarded) {
branch  0 taken 75%
branch  1 taken 25%
    15104:  691:            if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 12%
branch  1 taken 88%
     1854:  692:                state->coins += 4;//Add 4 coins to the amount of coins
     1854:  693:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1854:  694:                state->discardCount[currentPlayer]++;
     9267:  695:                for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 80%
branch  1 taken 20%
     7413:  696:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
     7413:  697:                }
     1854:  698:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1854:  699:                state->handCount[currentPlayer]--;
     1854:  700:                card_not_discarded = 0;//Exit the loop
     1854:  701:            }
    13250:  702:            else if (p > state->handCount[currentPlayer]) {
branch  0 taken 24%
branch  1 taken 76%
        -:  703:                if(DEBUG) {
        -:  704:                    printf("No estate cards in your hand, invalid choice\n");
        -:  705:                    printf("Must gain an estate if there are any\n");
        -:  706:                }
     3181:  707:                if (supplyCount(estate, state) > 0) {
branch  0 taken 50%
branch  1 taken 50%
     1578:  708:                    gainCard(estate, state, 0, currentPlayer);
        -:  709:
     1578:  710:                    state->supplyCount[estate]--;//Decrement estates
     1578:  711:                    if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  712:                        isGameOver(state);
    #####:  713:                    }
     1578:  714:                }
     3181:  715:                card_not_discarded = 0;//Exit the loop
     3181:  716:            }
        -:  717:
        -:  718:            else {
        -:  719:              // this bug causes an infinite loop  p=0;//Next card
    10069:  720:              p++;
        -:  721:            }
        -:  722:        }
     5035:  723:    }
        -:  724:
        -:  725:    else {
     4968:  726:        if (supplyCount(estate, state) > 0) {
branch  0 taken 50%
branch  1 taken 50%
     2472:  727:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  728:
     2472:  729:            state->supplyCount[estate]--;//Decrement Estates
     2472:  730:            if (supplyCount(estate, state) == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  731:                isGameOver(state);
    #####:  732:            }
     2472:  733:        }
        -:  734:    }
        -:  735:
        -:  736:
    10003:  737:    return 0;   
        -:  738:}
        -:  739:
function minionRefactor called 1002 returned 100% blocks executed 72%
     1002:  740:int minionRefactor(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos)
        -:  741:{
        -:  742:    int i;
        -:  743:    int j;
        -:  744:    //+1 action
     1002:  745:    state->numActions++;
        -:  746:
     1002:  747:	if (choice1)
branch  0 taken 48%
branch  1 taken 52%
        -:  748:    {
      484:  749:        state->coins = state->coins + 2;
      484:  750:    }
      518:  751:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100%
branch  1 taken 0%
        -:  752:    {
        -:  753:        //discard hand
   261705:  754:        while(numHandCards(state) > 0)
branch  0 taken 99%
branch  1 taken 1%
        -:  755:        {
   261187:  756:            discardCard(handPos, currentPlayer, state, 0);
        -:  757:        }
        -:  758:
        -:  759:        //draw 4
     2590:  760:        for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  761:        {
     2072:  762:            drawCard(currentPlayer, state);
     2072:  763:        }
        -:  764:
        -:  765:        //other players discard hand and redraw if hand size > 4
     2052:  766:        for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  767:        {
     1534:  768:            if (i == currentPlayer)
branch  0 taken 34%
branch  1 taken 66%
        -:  769:            {
      518:  770:                if ( state->handCount[i] > 4 )
branch  0 taken 0%
branch  1 taken 100%
        -:  771:                {
        -:  772:                    //discard hand
    #####:  773:                    while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  774:                    {
    #####:  775:                        discardCard(handPos, i, state, 0);
        -:  776:                    }
        -:  777:
        -:  778:                    //draw 4
    #####:  779:                    for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  780:                    {
    #####:  781:                        drawCard(i, state);
    #####:  782:                    }
    #####:  783:                }
      518:  784:            }
     1534:  785:        }
        -:  786:
      518:  787:    }
     1002:  788:    return 0;
        -:  789:}
        -:  790:
function ambassadorRefactor called 4 returned 100% blocks executed 41%
        4:  791:int ambassadorRefactor(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos)
        -:  792:{
        -:  793:    int j;		    //used to check if player has enough cards to discard
        -:  794:    int i;
        -:  795:
        4:  796:    if (choice2 > 2 || choice2 < 0)
branch  0 taken 75%
branch  1 taken 25%
branch  2 taken 33%
branch  3 taken 67%
        -:  797:    {
        2:  798:        return 0;
        -:  799:    }
        -:  800:
        2:  801:    if (choice1 == handPos)
branch  0 taken 0%
branch  1 taken 100%
        -:  802:    {
    #####:  803:        return 0;
        -:  804:    }
        -:  805:
        6:  806:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  807:    {
        4:  808:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -:  809:        {
    #####:  810:            j++;
    #####:  811:        }
        4:  812:    }
        2:  813:    if (j < choice2)
branch  0 taken 100%
branch  1 taken 0%
        -:  814:    {
        2:  815:        return 0;
        -:  816:    }
        -:  817:
        -:  818:    if (DEBUG)
        -:  819:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  820:
        -:  821:    //increase supply count for choosen card by amount being discarded
    #####:  822:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  823:
        -:  824:    //each other player gains a copy of revealed card
    #####:  825:    for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  826:    {
    #####:  827:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  828:        {
    #####:  829:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  830:        }
    #####:  831:    }
        -:  832:
        -:  833:    //discard played card from hand
    #####:  834:    discardCard(handPos, currentPlayer, state, 0);
        -:  835:
        -:  836:    //trash copies of cards returned to supply
    #####:  837:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  838:    {
    #####:  839:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  840:        {
    #####:  841:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  842:            {
    #####:  843:                discardCard(i, currentPlayer, state, 1);
    #####:  844:                break;
        -:  845:            }
    #####:  846:        }
    #####:  847:    }
        -:  848:
    #####:  849:    return 0;    
        4:  850:}
        -:  851:
function tributeRefactor called 10000 returned 100% blocks executed 82%
    10000:  852:int tributeRefactor(int currentPlayer, int nextPlayer, int tributeRevealedCards[], struct gameState *state)
        -:  853:{
        -:  854:    int i;
    10000:  855:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 10%
branch  1 taken 90%
      985:  856:        if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  857:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  858:            state->deckCount[nextPlayer]--;
    #####:  859:        }
      985:  860:        else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 5%
branch  1 taken 95%
       52:  861:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       52:  862:            state->discardCount[nextPlayer]--;
       52:  863:        }
        -:  864:        else {
        -:  865:            //No Card to Reveal
        -:  866:            if (DEBUG) {
        -:  867:                printf("No cards to reveal\n");
        -:  868:            }
        -:  869:        }
      985:  870:    }
        -:  871:
        -:  872:    else {
     9015:  873:        if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  874:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  875:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  876:                state->deckCount[nextPlayer]++;
    #####:  877:                state->discard[nextPlayer][i] = -1;
    #####:  878:                state->discardCount[nextPlayer]--;
    #####:  879:            }
        -:  880:
    #####:  881:            shuffle(nextPlayer,state);//Shuffle the deck
    #####:  882:        }
     9015:  883:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     9015:  884:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     9015:  885:        state->deckCount[nextPlayer]--;
     9015:  886:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -:  887:        // tributeRevealedCards[2] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; // this causes an out of bounds access error
     9015:  888:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     9015:  889:        state->deckCount[nextPlayer]--;
        -:  890:    }
        -:  891:
    10000:  892:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 10%
branch  1 taken 90%
      955:  893:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      955:  894:        state->playedCardCount--;
      955:  895:        tributeRevealedCards[1] = -1;
      955:  896:    }
        -:  897:
    30000:  898:    for (i = 0; i < 2; i ++) {
branch  0 taken 67%
branch  1 taken 33%
        -:  899:    //for (i = 0; i <= 2; i ++) { // this causes an out of bounds access error
    20000:  900:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 62%
branch  1 taken 38%
branch  2 taken 96%
branch  3 taken 4%
branch  4 taken 5%
branch  5 taken 95%
     8749:  901:            state->coins += 2;
     8749:  902:        }
        -:  903:
    11251:  904:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 94%
branch  3 taken 6%
branch  4 taken 93%
branch  5 taken 7%
branch  6 taken 92%
branch  7 taken 8%
branch  8 taken 9%
branch  9 taken 91%
     5751:  905:            drawCard(currentPlayer, state);
     5751:  906:            drawCard(currentPlayer, state);
     5751:  907:        }
        -:  908:        else { //Action Card
     5500:  909:            state->numActions = state->numActions + 2;
        -:  910:        }
    20000:  911:    }
        -:  912:
    10000:  913:    return 0;
        -:  914:}
        -:  915:
function mineRefactor called 3 returned 100% blocks executed 52%
        3:  916:int mineRefactor(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos)
        -:  917:{
        -:  918:    int i;
        -:  919:    int k;
        -:  920:
        3:  921:    k = 0;
        -:  922:
        3:  923:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 100%
        -:  924:    {
        1:  925:        return -1;
        -:  926:    }
        -:  927:
        2:  928:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  929:    {
    #####:  930:        return -1;
        -:  931:    }
        -:  932:
        2:  933:    if ( (getCost(state->hand[currentPlayer][choice1]) + 6) > getCost(choice2) )
branch  0 taken 100%
branch  1 taken 0%
        -:  934:    {
        2:  935:        return -1;
        -:  936:    }
        -:  937:
    #####:  938:    gainCard(choice2, state, 2, currentPlayer);
        -:  939:
        -:  940:    //discard card from hand
    #####:  941:    discardCard(handPos, currentPlayer, state, 0);
        -:  942:
        -:  943:    //discard trashed card
    #####:  944:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:    {
    #####:  946:        if (state->hand[currentPlayer][i] == k)
branch  0 never executed
branch  1 never executed
        -:  947:        {
    #####:  948:            discardCard(i, currentPlayer, state, 0);
    #####:  949:            break;
        -:  950:        }
    #####:  951:    }
        -:  952:
    #####:  953:    return 0;
        3:  954:}
        -:  955:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  956:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  957:{
        -:  958:    int i;
        -:  959:    int j;
        -:  960:    int k;
        -:  961:    int x;
        -:  962:    int index;
    #####:  963:    int currentPlayer = whoseTurn(state);
    #####:  964:    int nextPlayer = currentPlayer + 1;
        -:  965:
    #####:  966:    int tributeRevealedCards[2] = {-1, -1};
        -:  967:    int temphand[MAX_HAND];// moved above the if statement
    #####:  968:    int drawntreasure=0;
        -:  969:    int cardDrawn;
    #####:  970:    int z = 0;// this is the counter for the temp hand
    #####:  971:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  972:        nextPlayer = 0;
    #####:  973:    }
        -:  974:
        -:  975:
        -:  976:    //uses switch to select card and perform actions
    #####:  977:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  978:    {
        -:  979:    case adventurer:
    #####:  980:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  981:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  982:                shuffle(currentPlayer, state);
    #####:  983:            }
    #####:  984:            drawCard(currentPlayer, state);
    #####:  985:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  986:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  987:                drawntreasure++;
        -:  988:            else {
    #####:  989:                temphand[z]=cardDrawn;
    #####:  990:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  991:                z++;
        -:  992:            }
        -:  993:        }
    #####:  994:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  995:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  996:            z=z-1;
        -:  997:        }
    #####:  998:        return 0;
        -:  999:
        -: 1000:    case council_room:
        -: 1001:        //+4 Cards
    #####: 1002:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:        {
    #####: 1004:            drawCard(currentPlayer, state);
    #####: 1005:        }
        -: 1006:
        -: 1007:        //+1 Buy
    #####: 1008:        state->numBuys++;
        -: 1009:
        -: 1010:        //Each other player draws a card
    #####: 1011:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:        {
    #####: 1013:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1014:            {
    #####: 1015:                drawCard(i, state);
    #####: 1016:            }
    #####: 1017:        }
        -: 1018:
        -: 1019:        //put played card in played card pile
    #####: 1020:        discardCard(handPos, currentPlayer, state, 0);
        -: 1021:
    #####: 1022:        return 0;
        -: 1023:
        -: 1024:    case feast:
        -: 1025:        //gain card with cost up to 5
        -: 1026:        //Backup hand
    #####: 1027:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1028:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1029:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1030:        }
        -: 1031:        //Backup hand
        -: 1032:
        -: 1033:        //Update Coins for Buy
    #####: 1034:        updateCoins(currentPlayer, state, 5);
    #####: 1035:        x = 1;//Condition to loop on
    #####: 1036:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1037:            if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -: 1038:                if (DEBUG)
        -: 1039:                    printf("None of that card left, sorry!\n");
        -: 1040:
        -: 1041:                if (DEBUG) {
        -: 1042:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1043:                }
    #####: 1044:            }
    #####: 1045:            else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####: 1046:                printf("That card is too expensive!\n");
        -: 1047:
        -: 1048:                if (DEBUG) {
        -: 1049:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1050:                }
    #####: 1051:            }
        -: 1052:            else {
        -: 1053:
        -: 1054:                if (DEBUG) {
        -: 1055:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1056:                }
        -: 1057:
    #####: 1058:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1059:                x = 0;//No more buying cards
        -: 1060:
        -: 1061:                if (DEBUG) {
        -: 1062:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1063:                }
        -: 1064:
        -: 1065:            }
        -: 1066:        }
        -: 1067:
        -: 1068:        //Reset Hand
    #####: 1069:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1070:            state->hand[currentPlayer][i] = temphand[i];
    #####: 1071:            temphand[i] = -1;
    #####: 1072:        }
        -: 1073:        //Reset Hand
        -: 1074:
    #####: 1075:        return 0;
        -: 1076:
        -: 1077:    case gardens:
    #####: 1078:        return -1;
        -: 1079:
        -: 1080:    case mine:
        -: 1081:
    #####: 1082:        if (mineRefactor(choice1, choice2, currentPlayer, state, handPos) < 0 )
branch  0 never executed
branch  1 never executed
        -: 1083:        {
    #####: 1084:            return -1;
        -: 1085:        }
        -: 1086:        else
        -: 1087:        {
    #####: 1088:            return 0;
        -: 1089:        }
        -: 1090:       
        -: 1091:    case remodel:
    #####: 1092:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1093:
    #####: 1094:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1095:        {
    #####: 1096:            return -1;
        -: 1097:        }
        -: 1098:
    #####: 1099:        gainCard(choice2, state, 0, currentPlayer);
        -: 1100:
        -: 1101:        //discard card from hand
    #####: 1102:        discardCard(handPos, currentPlayer, state, 0);
        -: 1103:
        -: 1104:        //discard trashed card
    #####: 1105:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:        {
    #####: 1107:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1108:            {
    #####: 1109:                discardCard(i, currentPlayer, state, 0);
    #####: 1110:                break;
        -: 1111:            }
    #####: 1112:        }
        -: 1113:
        -: 1114:
    #####: 1115:        return 0;
        -: 1116:
        -: 1117:    case smithy:
        -: 1118:        //+3 Cards
    #####: 1119:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:        {
    #####: 1121:            drawCard(currentPlayer, state);
    #####: 1122:        }
        -: 1123:
        -: 1124:        //discard card from hand
    #####: 1125:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1126:        return 0;
        -: 1127:
        -: 1128:    case village:
        -: 1129:        //+1 Card
    #####: 1130:        drawCard(currentPlayer, state);
        -: 1131:
        -: 1132:        //+2 Actions
    #####: 1133:        state->numActions = state->numActions + 2;
        -: 1134:
        -: 1135:        //discard played card from hand
    #####: 1136:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1137:        return 0;
        -: 1138:
        -: 1139:    case baron:
    #####: 1140:        baronRefactor(choice1, currentPlayer, state);
    #####: 1141:        return 0;
        -: 1142:
        -: 1143:    case great_hall:
        -: 1144:        //+1 Card
    #####: 1145:        drawCard(currentPlayer, state);
        -: 1146:
        -: 1147:        //+1 Actions
    #####: 1148:        state->numActions++;
        -: 1149:
        -: 1150:        //discard card from hand
    #####: 1151:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1152:        return 0;
        -: 1153:
        -: 1154:    case minion:
    #####: 1155:        minionRefactor(choice1, choice2, currentPlayer, state, handPos);
    #####: 1156:        return 0;
        -: 1157:
        -: 1158:    case steward:
    #####: 1159:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1160:        {
        -: 1161:            //+2 cards
    #####: 1162:            drawCard(currentPlayer, state);
    #####: 1163:            drawCard(currentPlayer, state);
    #####: 1164:        }
    #####: 1165:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1166:        {
        -: 1167:            //+2 coins
    #####: 1168:            state->coins = state->coins + 2;
    #####: 1169:        }
        -: 1170:        else
        -: 1171:        {
        -: 1172:            //trash 2 cards in hand
    #####: 1173:            discardCard(choice2, currentPlayer, state, 1);
    #####: 1174:            discardCard(choice3, currentPlayer, state, 1);
        -: 1175:        }
        -: 1176:
        -: 1177:        //discard card from hand
    #####: 1178:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1179:        return 0;
        -: 1180:
        -: 1181:    case tribute:
    #####: 1182:        tributeRefactor(currentPlayer, nextPlayer, tributeRevealedCards, state);
    #####: 1183:        return 0;
        -: 1184:
        -: 1185:    case ambassador:
        -: 1186:        
    #####: 1187:        if (ambassadorRefactor(choice1, choice2, currentPlayer, state, handPos) < 0 )
branch  0 never executed
branch  1 never executed
        -: 1188:        {
    #####: 1189:            return -1;
        -: 1190:        }
        -: 1191:        else
        -: 1192:        {
    #####: 1193:            return 0;
        -: 1194:        }
        -: 1195:        
        -: 1196:    case cutpurse:
        -: 1197:
    #####: 1198:        updateCoins(currentPlayer, state, 2);
    #####: 1199:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:        {
    #####: 1201:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1202:            {
    #####: 1203:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1204:                {
    #####: 1205:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1206:                    {
    #####: 1207:                        discardCard(j, i, state, 0);
    #####: 1208:                        break;
        -: 1209:                    }
    #####: 1210:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1211:                    {
    #####: 1212:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1213:                        {
        -: 1214:                            if (DEBUG)
        -: 1215:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1216:                        }
    #####: 1217:                        break;
        -: 1218:                    }
    #####: 1219:                }
        -: 1220:
    #####: 1221:            }
        -: 1222:
    #####: 1223:        }
        -: 1224:
        -: 1225:        //discard played card from hand
    #####: 1226:        discardCard(handPos, currentPlayer, state, 0);
        -: 1227:
    #####: 1228:        return 0;
        -: 1229:
        -: 1230:
        -: 1231:    case embargo:
        -: 1232:        //+2 Coins
    #####: 1233:        state->coins = state->coins + 2;
        -: 1234:
        -: 1235:        //see if selected pile is in play
    #####: 1236:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1237:        {
    #####: 1238:            return -1;
        -: 1239:        }
        -: 1240:
        -: 1241:        //add embargo token to selected supply pile
    #####: 1242:        state->embargoTokens[choice1]++;
        -: 1243:
        -: 1244:        //trash card
    #####: 1245:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:        return 0;
        -: 1247:
        -: 1248:    case outpost:
        -: 1249:        //set outpost flag
    #####: 1250:        state->outpostPlayed++;
        -: 1251:
        -: 1252:        //discard card
    #####: 1253:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1254:        return 0;
        -: 1255:
        -: 1256:    case salvager:
        -: 1257:        //+1 buy
    #####: 1258:        state->numBuys++;
        -: 1259:
    #####: 1260:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1261:        {
        -: 1262:            //gain coins equal to trashed card
    #####: 1263:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1264:            //trash card
    #####: 1265:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1266:        }
        -: 1267:
        -: 1268:        //discard card
    #####: 1269:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1270:        return 0;
        -: 1271:
        -: 1272:    case sea_hag:
    #####: 1273:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1274:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1275:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1276:                state->deckCount[i]--;
    #####: 1277:                state->discardCount[i]++;
    #####: 1278:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1279:            }
    #####: 1280:        }
    #####: 1281:        return 0;
        -: 1282:
        -: 1283:    case treasure_map:
        -: 1284:        //search hand for another treasure_map
    #####: 1285:        index = -1;
    #####: 1286:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1287:        {
    #####: 1288:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1289:            {
    #####: 1290:                index = i;
    #####: 1291:                break;
        -: 1292:            }
    #####: 1293:        }
    #####: 1294:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1295:        {
        -: 1296:            //trash both treasure cards
    #####: 1297:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1298:            discardCard(index, currentPlayer, state, 1);
        -: 1299:
        -: 1300:            //gain 4 Gold cards
    #####: 1301:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1302:            {
    #####: 1303:                gainCard(gold, state, 1, currentPlayer);
    #####: 1304:            }
        -: 1305:
        -: 1306:            //return success
    #####: 1307:            return 1;
        -: 1308:        }
        -: 1309:
        -: 1310:        //no second treasure_map found in hand
    #####: 1311:        return -1;
        -: 1312:    }
        -: 1313:
    #####: 1314:    return -1;
    #####: 1315:}
        -: 1316:
function discardCard called 265810 returned 100% blocks executed 90%
   265810: 1317:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1318:{
        -: 1319:
        -: 1320:    //if card is not trashed, added to Played pile
   265810: 1321:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1322:    {
        -: 1323:        //add card to played pile
   265810: 1324:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
   265810: 1325:        state->playedCardCount++;
   265810: 1326:    }
        -: 1327:
        -: 1328:    //set played card to -1
   265810: 1329:    state->hand[currentPlayer][handPos] = -1;
        -: 1330:
        -: 1331:    //remove card from player's hand
   265810: 1332:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1%
branch  1 taken 99%
        -: 1333:    {
        -: 1334:        //reduce number of cards in hand
      526: 1335:        state->handCount[currentPlayer]--;
      526: 1336:    }
   265284: 1337:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1338:    {
        -: 1339:        //reduce number of cards in hand
    #####: 1340:        state->handCount[currentPlayer]--;
    #####: 1341:    }
        -: 1342:    else
        -: 1343:    {
        -: 1344:        //replace discarded card with last card in hand
   265284: 1345:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1346:        //set last card to -1
   265284: 1347:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1348:        //reduce number of cards in hand
   265284: 1349:        state->handCount[currentPlayer]--;
        -: 1350:    }
        -: 1351:
   265810: 1352:    return 0;
        -: 1353:}
        -: 1354:
function gainCard called 36063 returned 100% blocks executed 100%
    36063: 1355:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1356:{
        -: 1357:    //Note: supplyPos is enum of choosen card
        -: 1358:
        -: 1359:    //check if supply pile is empty (0) or card is not used in game (-1)
    36063: 1360:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 22%
branch  1 taken 78%
        -: 1361:    {
     7807: 1362:        return -1;
        -: 1363:    }
        -: 1364:
        -: 1365:    //added card for [whoseTurn] current player:
        -: 1366:    // toFlag = 0 : add to discard
        -: 1367:    // toFlag = 1 : add to deck
        -: 1368:    // toFlag = 2 : add to hand
        -: 1369:
    28256: 1370:    if (toFlag == 1)
branch  0 taken 44%
branch  1 taken 56%
        -: 1371:    {
    12547: 1372:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    12547: 1373:        state->deckCount[player]++;
    12547: 1374:    }
    15709: 1375:    else if (toFlag == 2)
branch  0 taken 70%
branch  1 taken 30%
        -: 1376:    {
    11028: 1377:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    11028: 1378:        state->handCount[player]++;
    11028: 1379:    }
        -: 1380:    else
        -: 1381:    {
     4681: 1382:        state->discard[player][ state->discardCount[player] ] = supplyPos;
     4681: 1383:        state->discardCount[player]++;
        -: 1384:    }
        -: 1385:
        -: 1386:    //decrease number in supply pile
    28256: 1387:    state->supplyCount[supplyPos]--;
        -: 1388:
    28256: 1389:    return 0;
    36063: 1390:}
        -: 1391:
function updateCoins called 21012 returned 100% blocks executed 85%
    21012: 1392:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1393:{
        -: 1394:    int i;
        -: 1395:
        -: 1396:    //reset coin count
    21012: 1397:    state->coins = 0;
        -: 1398:
        -: 1399:    //add coins for each Treasure card in player's hand
   126072: 1400:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1401:    {
   105060: 1402:        if (state->hand[player][i] == copper)
branch  0 taken 79%
branch  1 taken 21%
        -: 1403:        {
    83048: 1404:            state->coins += 1;
    83048: 1405:        }
    22012: 1406:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1407:        {
    #####: 1408:            state->coins += 2;
    #####: 1409:        }
    22012: 1410:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1411:        {
    #####: 1412:            state->coins += 3;
    #####: 1413:        }
   105060: 1414:    }
        -: 1415:
        -: 1416:    //add bonus
    21012: 1417:    state->coins += bonus;
        -: 1418:
    21012: 1419:    return 0;
        -: 1420:}
        -: 1421:
        -: 1422:
        -: 1423://end of dominion.c
        -: 1424:
